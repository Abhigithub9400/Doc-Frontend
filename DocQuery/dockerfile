# Stage 1: Build the application
FROM ubuntu:22.04 AS build-stage

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Set the working directory inside the container
WORKDIR /app

# Install dependencies and Node.js
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl ca-certificates apt-transport-https gnupg && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /usr/share/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && \
    apt-get install -y nodejs && \
    npm install -g npm@latest && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy package.json and package-lock.json to the container
COPY package*.json ./

# Install npm dependencies
RUN npm ci

# Copy the rest of the application code to the container
COPY . .

# Accept build arguments for API URL
ARG NUXT_BASE_API_URL
ENV NUXT_BASE_API_URL=${NUXT_BASE_API_URL}

# Build the application
RUN npx nuxt build

# Stage 2: Runtime image serving the Node.js application with Apache
FROM ubuntu:22.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install Node.js and Apache
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl ca-certificates apt-transport-https gnupg apache2 supervisor && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /usr/share/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && \
    apt-get install -y nodejs && \
    a2enmod proxy proxy_http rewrite headers && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Set the working directory for Node.js app
WORKDIR /app

# Copy only the necessary files from the build stage
COPY --from=build-stage /app/.output ./output

# Copy Apache configuration
COPY ci-cd/apache-config.conf /etc/apache2/sites-available/000-default.conf

# Create supervisor config to run both Node.js and Apache
RUN echo "[supervisord]\nnodaemon=true\n\n[program:nodejs]\ncommand=node /app/output/server/index.mjs\ndirectory=/app\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/supervisor/nodejs.log\nstderr_logfile=/var/log/supervisor/nodejs.err\n\n[program:apache2]\ncommand=/usr/sbin/apache2ctl -D FOREGROUND\nautorestart=true\nstdout_logfile=/var/log/supervisor/apache2.log\nstderr_logfile=/var/log/supervisor/apache2.err" > /etc/supervisor/conf.d/supervisord.conf

# Create log directory for supervisor
RUN mkdir -p /var/log/supervisor

# Expose port 80
EXPOSE 80

# Set environment variables for the app
ARG NUXT_BASE_API_URL
ENV NUXT_BASE_API_URL=${NUXT_BASE_API_URL}
ENV HOST=0.0.0.0
ENV PORT=3000

# Start supervisor which will run both Node.js and Apache
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]